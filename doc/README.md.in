# Schema Sure

SchemaSure is a framework for ensuring a set of related JavaScript objects are always in a valid state where "valid" is defined by a set of functions you provide. Think of it sort of like constrains in SQL, but for JavaScript objects.

SchemaSure is ready for cautious production use, but has not had extensive real-world testing. See _Current Status_ below for details.

## Live Demo

[HTML Form Tools / Schema Sure Example](https://jsfiddle.net/adamcarheden/kr4cdhde/)

# Install
``` bash
npm install schema-sure --save
```
or
``` bash
git clone https://github.com/adamcarheden/schema-sure.git
```

## Usage

### Basic

#### In the Browser
{{{../examples/basic.html}}}

#### On the Server
{{{../examples/basic.js}}}

...which produces the following:

``` bash
$ node basic.js
'undefined' is not a number

$ node basic.js 20
'20' is not between 1 and 1

$ node basic.js 5
'5' /is/ between 0 and 10
```

### Atomic Data Manipulation
You can delay validation using atomicSet() for complex state transitions:

{{{../examples/atomic.js}}}

### Collecting exceptions from all failing validators
You can and should use the exceptions thrown by your validators to inform the user about why input is invalid.

{{{../examples/multi-ex.js}}}

Why not just stop at the first validator that fails? Because you should give the user a complete list of what's wrong so he can fix it all at once instead of trying again only to find there's some other problem you didn't tell him about. See [HTML Form Tools](https://github.com/adamcarheden/html-form-tools) for some UI components to help with that.

### Atomic instantiation of multiple constrained objects

Sometimes you'll want circular dependencies in your validation -- One object is valid only if it has a reference to another object but the second object is only valid if it has a reference to the first. Since neither object can exist alone and validation runs when you instantiate objects, how do you instantiate two such objects? SchemaSure supports this by creating vanilla Javascript objects with such a circular dependency and passing either of those objects as the init values (first argument) of the appropriate constructor: 
/
{{{../examples/multi-construct.js}}}

### Constructors and Prototypes/Subclassing

Since SchemaSure defines a constructor for classes you create with it, you may be wondering if that means you can't define your own constructor. Not so! The 3rd argument to SchemaSure.createClass() is your constructor (the class name and schema being the first two arguments). The forth argument is it's prototype which works just likes passing prototypes to JavaScript's Object.create(). (Some of you are thinking "Didn't we go to ES6 to get away from Object.create()". I get it, but schema-sure is kind of like a language feature, which can't add without going through the ECMAScript committee, which takes years. Thank goodness JS is such a flexable language that we can add stuff like this and only send it to committee if it proves useful rather than going through committee only to discover it's a bad idea years later when it's baked into the language.)

{{{../examples/const-proto.js}}}

## API

### Creating classes
schemaSure.createClass(className (string), classDefinition, constructor, parentPrototype)

### Class Definitions
Class definitions are objects where each property is a specification for a property of that name on instances of your class. This is similar to Javascript's native [Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create). Each property definition can contain the following keys:

* configurable - The same as Object.create().
* default - A default value for the property. 
* get - A function to call on the stored value before returning it. *NOT* the same as Object.create(). Your function will get the value as its argument. It will *NOT* be applied to the object (i.e. 'this' will not point to the object.)
* enumerable - The same as Object.create().
* set - A function to call on the assigned value before storing it. *NOT* the same as Object.create(). Your function will get the value as its argument. It will *NOT* be applied to the object (i.e. 'this' will not point to the object.)
* validate - Zero or more functions to call any time the property changes. It may be one of the following:
	* A string matching the name of a method of the current class
	* A function
	* A SchemaSure.Validator object. This allows you to have the validator function applied to some other object when this object changes.
	* An array containing any mix of the above
	* An object where values are any of the first three above. When validation fails, the keys will be the names of the validators in the exceptions object.
* value - The same as Object.create(). Should generally only be used to define methods of your class.
* writable - The same as Object.create().

### Validation functions and SchemaSure.Validator
Sometimes you want to run validation on one object when a property of some other object changes. SchemaSure supports this by using Validator objects:
``` js
new SchemaSure.Validator(validationFunction, applyToFunction)
```
ApplyToFunction will be applied to the current object and should return the object the validator should be applied to.

## Limitations, Gotchas and Stuff You Might Have To Do Differently
* We don't support arrays (yet). [You can't subclass a Javascript array](http://www.2ality.com/2013/03/subclassing-builtins-es6.html), so even bable has no hook to intercept array operations (push, pop, splice, etc.), so we have no way to call a validator when the array changes. However, I plan to write an 'array-like' object that runs validators befor proxying operations to an array at some point.
* I haven't done any load/big-data testing and I fully expect it won't scale well. If your data structure will have more than a few dozen related objects with cross-validation, things might get slow (or perhapse not, I haven't tested). But I suspect a large number of projects don't need any such complexity, so I expect SchemaSure to be useful even if it never scales well.

## Roadmap
I plan to implement the following features:
* Arrays with validation hooks
* Serialization/Deserialization, complete with [circular reference support](https://www.npmjs.com/package/circularjs)
* Persistence / SchemaSure Server - A single method call will persist all changed objects in a schema via an REST API.
* Query Language, Sparse Objects and memory-aware data structures (The Pipe Dream) - To maintain validity, all objects that reference each other must always be included when saving or loading from persistent storage. That won't scale well. A query language letting the user load some subset of objects initially and load the others later only if they're accessed could address that for some algorithms. Loading large data as arrays where the user specifies if things are orgainzed in [row- or column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order) order in memory, depending on how the algorithm will access them, could also make things fast. This sort of think might have to wait until I rewrite the whole thing in C, which is probably never. But perhapse SchemaSure will serve as a useful prototype for some future technology (probably written by someone else) to replace SQL and take the work out of shuffling data between memory and persistent storage and between the memory of multiple processes running on different computers.

## Current Status (Alpha/Experimental)

Everything seems to work and I have extensive unit testing. I haven't done cross-browser testing or used it on any non-trivial real-world projects yet though, so use it at your own risk.

## Contributing
``` bash
git clone https://github.com/adamcarheden/schema-sure.git
cd schema-sure
npm run build
npm run test
```
Everything important is in src/SchemaSure.js


PRs welcome.
