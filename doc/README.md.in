# data-true

DataTrue is a framework for ensuring a set of related JavaScript objects are always in a valid state where "valid" is defined by a set of functions you provide. Think of it sort of like constrains in SQL, but for JavaScript objects.

DataTrue is ready for cautious production use, but has not had extensive real-world testing. See _Current Status_ below for details.

## Usage

### Basic

#### In the Browser
{{{../examples/basic.html}}}

#### On the Server
{{{../examples/basic.js}}}

### Atomic Data Manipulation
You can delay validation using atomicSet() for complex state transitions
{{{../examples/atomic.js}}}

### Collecting exceptions from all failing validators
{{{../examples/multi-ex.js}}}
Why not just stop at the first validator that fails? Because you should give the user a complete list of what's wrong so he can fix it all at once instead of trying again only to find there's some other problem you didn't tell him about. Additional tools for that purpose will be linked here in the near future.

### Atomic instantiation of multiple constrained objects
{{{../examples/multi-construct.js}}}

### Constructors and Prototypes/Subclassing
{{{../examples/const-proto.js}}}

## API

### Creating classes
dataTrue.createClass(className (string), classDefinition, constructor, parentPrototype)

### Class Definitions
Class definitions are objects where each property is a specification for a property of that name on instances of your class. This is similar to Javascript's native [Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create). Each property definition can contain the following keys:

* configurable - The same a Object.create().
* default - A default value for the property. 
* get - A function to call on the stored value before returning it. *NOT* the same as Object.create(). Your function will get the value as its argument. It will *NOT* be applied to the object (i.e. 'this' will not point to the object.)
* enumerable - The same a Object.create().
* set - A function to call on the assigned value before storing it. *NOT* the same as Object.create(). Your function will get the value as its argument. It will *NOT* be applied to the object (i.e. 'this' will not point to the object.)
* validate - Zero or more functions to call any time the property changes. It may be one of the following:
** A string matching the name of method of the current class
** A function
** A DataTrue.Validator object. This allows you to have the validator function applied to some other object when this object changes.
** An array containing any mix of the above
** An object where values are any of the first three above. When validation fails, the keys will be the names of the validators in the exceptions object.
* value - The same as Object.create(). Should generally only be used to define methods of your class.
* writable - The same a Object.create().

### Validation functions and DataTrue.Validator
Sometimes you want to run validation on one object when a property of some other object changes. DataTrue supports this by using Validator objects:
``` js
new DataTrue.Validator(validationFunction, applyToFunction)
```
ApplyToFunction will be applied to the current object and should return the object the validator should be applied to.

## Limitations, Gotchas and Stuff You Might Have To Do Differently

## Roadmap

### Arrays
### Serialization
### Persistence / DataTrue Server
### Query Language, Sparse Objects and memory-aware data structures (The Pipe Dream)

## Current Status (Alpha/Experimental)

## Contributing
